{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["data","Timer","props","state","time","Date","now","tugriks","years","months","days","hours","minutes","seconds","savings","obj","secs","this","setState","Math","floor","prevState","init","getTime","interval","setInterval","secondsToTime","clearInterval","className","Component","App","href","style","color","backgroundColor","height","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27d02f86.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst data = \n{\n    quitDay: 1624775184000, //  new Date(2021, 06, 27) i f' ed up \n    dailyCost: 2500, // cost of a box of Parliament in Mongolia counted as in 0.5 pack a day\n    previousSavings: 1930000\n  };\n\nclass Timer extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { time: Date.now(), tugriks: null,\n         years: null, months: null, days: null, hours: null, minutes: null,\n        seconds : 0, savings: null, obj: null };\n    }\n\n    init (secs) {\n        this.setState({\n            seconds: secs,\n            minutes : Math.floor(secs / 60),\n            hours : Math.floor(secs / (60 * 60)),\n            days : Math.floor(Math.floor(secs / (60 * 60)) / 24),\n            years : Math.floor(Math.floor(Math.floor(secs / (60 * 60)) / 24) / 365),\n            months :  Math.floor(Math.floor(Math.floor(secs / (60 * 60)) / 24) / 30),\n            savings :  Math.floor(Math.floor(secs / (60 * 60)) / 24) * data.dailyCost\n        });\n    }\n\n    secondsToTime(){\n        this.setState(prevState => ({\n            seconds: prevState.seconds + 1,\n            hours : Math.floor(this.state.seconds / (60 * 60)),\n            days : Math.floor(this.state.hours / 24),\n            years : Math.floor(this.state.days / 365),\n            months :  Math.floor(this.state.days / 30),\n            minutes : Math.floor(this.state.seconds / 60),\n            savings :  this.state.days * data.dailyCost\n        }));\n      }\n\n    componentDidMount() {\n        this.init(Math.floor((new Date(this.state.time).getTime() - new Date(data.quitDay).getTime())/1000));\n        this.interval = setInterval(() => this.secondsToTime(), 1000);\n    }\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n  \n    render() {\n      return(\n          <div className = \"App-container\">\n            <div className = \"App-timeline\">\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.time % 60}</h1>\n                    <p>Секунд</p>\n                </div>\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.minutes % 60}</h1>\n                    <p>Минут</p>\n                </div>\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.hours % 24}</h1>\n                    <p>Цаг</p>\n                </div>\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.days % 30}</h1>\n                    <p>Өдөр</p>\n                </div>\n            </div>\n            <div className = \"App-timeline\">\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.months % 12}</h1>\n                    <p>Сар</p>\n                </div>\n                <div className = \"App-timeline-div\">\n                    <h1>{this.state.years}</h1>\n                    <p>Жил</p>\n                </div>\n                <div className = \"App-timeline-div-savings\">\n                    <h1>{this.state.savings + data.previousSavings}₮</h1>\n                    <p>Хэмнэлт</p>\n                </div>\n            </div>\n        </div>\n      );\n    }\n  }\n  \nexport default Timer;","import React from 'react';\nimport './App.css';\nimport Timer from './Timer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className = \"App-container\">\n        <header className=\"App-header\">\n          <h1>\n            tushig quits.\n          </h1>\n          <p className = \"App-p\">\n            <a\n              className=\"App-link\"\n              href=\"https://luffy1727.github.io/my-portfolio/\"\n            >\n                Чинтүшиг Очирсүх\n            </a> тамхийг орхив. <br/> Энэхүү вэб нь түүнд ирээдүйд хэрэгтэй болох бөгөөд тэр тамхинаас гараад:\n          </p>\n        </header>\n      </div>\n      <Timer/>\n      <hr\n        style={{\n            color: '#eebbc3',\n            backgroundColor: '#eebbc3',\n            height: 5\n        }}\n      />\n      <div className = \"App-container\">\n        <div className = \"App-timeline\">\n          <div className = \"App-timeline-div\">\n            <h1>1 Цаг</h1>\n            <p className = \"App-text\">Зүрхний цохилт багасна</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>12 Цаг</h1>\n            <p className = \"App-text\">Цусан дахь carbon monoxide түвшин хэвийн болно.</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>14 Хоногоос 3 сар</h1>\n            <p className = \"App-text\">\n              Зүрхний шигдээс тусах магадлал багасч, Уушигний үйл ажиллагаа хэвийн дээрдэж эхлэнэ.\n            </p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>1 ээс 9 сар</h1>\n            <p className = \"App-text\">Ханиалгах болон амьсгаа дутагдах нь багасна</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>1 Жил</h1>\n            <p className = \"App-text\">Зүрхний титэм судасны өвчин тусах магадлал тамхичнаас 2 дахин бага болно</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>5 Жил</h1>\n            <p className = \"App-text\">Саа өвчин тусах магадлал жирийн хүнийхтэй адил болно</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>10 Жил</h1>\n            <p className = \"App-text\">Уушигний хорт хавдараар үхэх магадлал тамхичин хүнийхаас 2 дахин бага болсон байна</p>\n          </div>\n          <div className = \"App-timeline-div\">\n            <h1>15 Жил</h1>\n            <p className = \"App-text\">Зүрхний титэм судасны өвчин тусах магадлал жирийн хүнийхтай адил болсон байна</p>\n          </div>\n        </div>\n      </div>\n      <p className=\"p-footer\">\n            <small\n              ><a\n                href=\"https://www.cdc.gov/tobacco/data_statistics/sgr/2004/posters/20mins/index.htm\"\n                target=\"blank\"\n                >cdc.gov</a\n              >\n              |\n              <a href=\"https://github.com/luffy1727/tushig-quits\" target=\"blank\"\n                >GitHub</a\n              ></small\n            >\n        </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}